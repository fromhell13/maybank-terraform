provider "aws" {
  region = "ap-southeast-5"
}

# VPC
resource "aws_vpc" "my_vpc" {
  cidr_block = "192.168.0.0/16"
}

# Subnets
# Availability Zone A
resource "aws_subnet" "public_subnet_a" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = "172.16.0.0/24"
  availability_zone = "ap-southeast-1a"
}

resource "aws_subnet" "private_subnet_a" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = "172.16.1.0/24"
  availability_zone = "ap-southeast-1a"
}

# Availability Zone B
resource "aws_subnet" "public_subnet_b" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = "172.16.2.0/24"
  availability_zone = "ap-southeast-1b"
}

resource "aws_subnet" "private_subnet_b" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = "172.16.3.0/24"
  availability_zone = "ap-southeast-1b"
}

# Internet Gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.my_vpc.id
}

# NAT Gateway (Availability Zone A)
resource "aws_eip" "nat_eip_a" {
  vpc = true
}

resource "aws_nat_gateway" "nat_gw_a" {
  allocation_id = aws_eip.nat_eip_a.id
  subnet_id     = aws_subnet.public_subnet_a.id
}

# NAT Gateway (Availability Zone B)
resource "aws_eip" "nat_eip_b" {
  vpc = true
}

resource "aws_nat_gateway" "nat_gw_b" {
  allocation_id = aws_eip.nat_eip_b.id
  subnet_id     = aws_subnet.public_subnet_b.id
}

# Route Tables
# Public Route Table (for AZ A & B)
resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block = "192.168.0.0/16"
    gateway_id = "local"
  }

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }
}

# Associate Public Route Table with Public Subnets
resource "aws_route_table_association" "public_association_a" {
  subnet_id      = aws_subnet.public_subnet_a.id
  route_table_id = aws_route_table.public_rt.id
}

resource "aws_route_table_association" "public_association_b" {
  subnet_id      = aws_subnet.public_subnet_b.id
  route_table_id = aws_route_table.public_rt.id
}

# Private Route Table (for AZ A)
resource "aws_route_table" "private_rt_a" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block = "192.168.0.0/16"
    gateway_id = "local"
  }

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat_gw_a.id
  }
}

resource "aws_route_table_association" "private_association_a" {
  subnet_id      = aws_subnet.private_subnet_a.id
  route_table_id = aws_route_table.private_rt_a.id
}

# Private Route Table (for AZ B)
resource "aws_route_table" "private_rt_b" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block = "192.168.0.0/16"
    gateway_id = "local"
  }

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat_gw_b.id
  }
}

resource "aws_route_table_association" "private_association_b" {
  subnet_id      = aws_subnet.private_subnet_b.id
  route_table_id = aws_route_table.private_rt_b.id
}

# VPC Endpoint for SSM
resource "aws_vpc_endpoint" "ssm" {
  vpc_id       = aws_vpc.my_vpc.id
  service_name = "com.amazonaws.ap-southeast-1.ssm"
  subnet_ids   = [aws_subnet.private_subnet_a.id, aws_subnet.private_subnet_b.id]
}

# Auto Scaling Group for EC2 in AZ A (Private Subnet)
resource "aws_launch_template" "ec2_launch_template" {
  name_prefix   = "my-launch-template"
  image_id      = "ami-12345678"  # Replace with a valid AMI
  instance_type = "t3.medium"

  network_interfaces {
    subnet_id = aws_subnet.private_subnet_a.id
    associate_public_ip_address = false
  }
}

resource "aws_autoscaling_group" "asg" {
  desired_capacity     = 1
  max_size             = 1
  min_size             = 1
  vpc_zone_identifier  = [aws_subnet.private_subnet_a.id]
  launch_template {
    id      = aws_launch_template.ec2_launch_template.id
    version = "$Latest"
  }
}

# RDS for Master and Replica (MariaDB)
resource "aws_db_instance" "master_rds" {
  identifier          = "master-mariadb"
  engine              = "mariadb"
  instance_class      = "db.t3.micro"
  allocated_storage   = 20
  db_subnet_group_name = aws_db_subnet_group.my_db_subnet_group.name
  publicly_accessible = false
  multi_az            = false
  availability_zone   = "ap-southeast-1a"
  username            = "admin"
  password            = "password"
}

resource "aws_db_instance" "replica_rds" {
  identifier          = "replica-mariadb"
  engine              = "mariadb"
  instance_class      = "db.t3.micro"
  allocated_storage   = 20
  db_subnet_group_name = aws_db_subnet_group.my_db_subnet_group.name
  publicly_accessible = false
  multi_az            = false
  availability_zone   = "ap-southeast-1b"
  username            = "admin"
  password            = "password"
  replicate_source_db = aws_db_instance.master_rds.id
}

# SSM Host EC2 in AZ B (Public Subnet)
resource "aws_instance" "ssm_host" {
  ami           = "ami-12345678"  # Replace with valid AMI
  instance_type = "t3.medium"
  subnet_id     = aws_subnet.public_subnet_b.id
}

# RDS Subnet Group
resource "aws_db_subnet_group" "mydb_subnet_group" {
  name       = "mydb_subnet_group"
  subnet_ids = [aws_subnet.private_subnet_a.id, aws_subnet.private_subnet_b.id]
}

# CloudFront Distribution
resource "aws_cloudfront_distribution" "my_distribution" {
  origin {
    domain_name = aws_s3_bucket.mybucket.bucket_regional_domain_name
    origin_id   = "s3-origin"
  }

  enabled             = true
  default_cache_behavior {
    target_origin_id       = "s3-origin"
    viewer_protocol_policy = "redirect-to-https"

    # Define allowed methods (required)
    allowed_methods = ["GET", "HEAD", "OPTIONS"]

    # Define cached methods (required)
    cached_methods = ["GET", "HEAD"]
  }

  viewer_certificate {
    cloudfront_default_certificate = true
  }

  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }
}


# S3 Bucket for CloudFront Origin
resource "aws_s3_bucket" "mybucket" {
  bucket = "my-unique-bucket-name"
}

# Public NLB (connected to Auto Scaling Group)
resource "aws_lb" "public_nlb" {
  name               = "public-nlb"
  internal           = false
  load_balancer_type = "network"
  subnets            = [aws_subnet.public_subnet_a.id, aws_subnet.public_subnet_b.id]
}

# Target Group for Auto Scaling EC2
resource "aws_lb_target_group" "asg_target" {
  name        = "asg-tg"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = aws_vpc.my_vpc.id
  target_type = "instance"
}

# NLB Listener
resource "aws_lb_listener" "nlb_listener" {
  load_balancer_arn = aws_lb.public_nlb.arn
  port              = "80"
  protocol          = "HTTP"
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.asg_target.arn
  }
}
